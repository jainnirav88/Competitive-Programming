<snippet>
    <content><![CDATA[
struct DSU {
    vector<int> parent, siz; // size of roots.
    int components;

    DSU(int n){
        // n = size here
        components = n;
        for(int i = 0; i <= n; i++){
            parent.push_back(i);
            siz.push_back(1); // Initially all are root -> size = 1.
        }
    }

    int root(int v){
        while(v != parent[v]) v = parent[v];
        return v;
    }

    bool find(int v, int u){
        return root(v) == root(u);
    }

    bool Union(int v, int u){
        int root_v = root(v);
        int root_u = root(u);
        if(root_v == root_u) return false;

        if(siz[root_v] < siz[root_u]) swap(root_v, root_u);
        
        parent[root_u] = root_v;
        siz[root_v] += siz[root_u];
        siz[root_u] = 0;
        components--;
        
        return true;
    }

    void printARR(){
        // to print the array.
        for(int i = 1; i <= n; i++){
            cout << parent[i] << " \n"[i==n];
        }
    }

    void printSIZE(){
        // to print the size, size = 0 -> it's connected in some set, size != 0 -> it's root.
        for(int i = 1; i <= n; i++){
            cout << siz[i] << " \n"[i==n];
        }
    }
    // copy : DSU dsu(n);
};]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>DSUCLASS</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
    <!-- Check doc for details. -->
</snippet>
