<snippet>
    <content><![CDATA[
struct DSU {
    vector<int> parent, sz; // size of roots.
    int components;

    DSU(int n){ // n = size
        components = n;
        for(int i = 0; i <= n; i++){
            parent.push_back(i);
            sz.push_back(1); // initially all are root -> size = 1.
        }
    }

    int root(int v){
        while(v != parent[v]) v = parent[v];
        return v;
    }

    bool find(int v, int u){ // isConnected?
        return root(v) == root(u);
    }

    bool union(int v, int u){
        int root_v = root(v);
        int root_u = root(u);
        if(root_v == root_u) return false;

        if(sz[root_v] < sz[root_u]) swap(root_v, root_u);
        
        parent[root_u] = root_v;
        sz[root_v] += sz[root_u];
        sz[root_u] = 0;
        components--;
        
        return true;
    }

    void printParent(){
        // to print the parent array, 1 - based indexing
        for(int i = 1; i <= n; i++){
            cout << parent[i] << " \n"[i==n];
        }
    }

    void printSIZE(){
        // to print the size, size = 0 -> it's connected in some set, size != 0 -> it's root, 1 - based indexing
        for(int i = 1; i <= n; i++){
            cout << sz[i] << " \n"[i==n];
        }
    }
};

// TC: O(M*logN)
int mst_kruskal(){
    DSU dsu(n);

    sort(edges.begin(), edges.end());

    int res = 0;

    for(auto [weight, from, to] : edges){
        if(dsu.union(from, to)) res += weight;
    }

    return res;
}]]></content>
    <description>MST - krushkal's algo.</description>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>MST</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.cpp, source.c++</scope>
</snippet>
