<snippet>
    <content><![CDATA[
#include<bits/stdc++.h> // 41 55 "baklolâ˜º, take it easy"
using namespace std;

// #include<ext/pb_ds/assoc_container.hpp>
// using namespace __gnu_pbds;
// typedef tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> pbds;

using ll = long long int;
using ld = long double;
using ull = unsigned long long int;

#define int       long long
#define report(x) cout << ((x) ? "Yes" : "No") << '\n'

template<typename T1, typename T2> ostream& operator<<(ostream &ostream, const pair<T1, T2> &p){
    ostream << p.first << " " << p.second;
    return ostream;
}
template<typename T> ostream& operator<<(ostream &ostream, const vector<T> &v){
    for(auto &it : v) ostream << it << " ";
    return ostream;
}

#ifdef LOCAL
#include<E:\Programming\CP\A-Main\debug\debug_code.h> // errors : debug_code.h
#else
#define deb(...)
#define debv(v, k, n)
#define deb2dv(V, k, n, m)
#define line
#endif

constexpr int mod = 1e9 + 7; // 998244353;
constexpr long double eps = 1e-9;
constexpr long double pi = 3.141592653589793238;
constexpr long long inf = 2e9, ninf = -2e9;
constexpr int N = 3e5 + 5, M = 2e5 + 5;

/*/------------------------------ CODE BEGINS ------------------------------/*/



void TC_SOLVE() {


}

/*/------------------------------- CODE ENDS -------------------------------/*/

int32_t main() {
    cin.tie(0)->sync_with_stdio(0);

    // cout << setprecision(12) << fixed;
    int tc = 1;
    cin >> tc;
    for(int i = 1; i <= tc; i++) {
        // cout << "Case #" << i << ": ";
        TC_SOLVE();
#ifdef LOCAL
        auto brute_force = [&]()->void{

        };
        // brute_force();
        // break;
#endif
    }

    cerr << "[time:" << 1.0 * clock() / CLOCKS_PER_SEC << "s] ";
    return 0;
}

/*
-> Please, don't get stuck at one approach only.
-> Understood the problem?, misread?
-> edge cases, n = 1 ?
-> binary search ?
-> brute_force ?
-> time complexity - 1 sec : 4e8 will work but risky.
-> space complexity - 256 mb : 6e7(int), 3e7(ll), 2e8(bool, char), will work.
-> entire input - multiple testcases.
-> mod : sort ?, mint, remove #define int.
-> Iterative > Recursive.
-> clear - global variables.
-> builtin function - add ll.
-> Move on - if completely_stuck > 30 minute.
-> Submit - right file.
*/

/*
-> Don't assume blindly.
-> Focus on problem.
-> Recovery from failure.
-> Do consider worst case time complexity.
-> If solution is barely passing then do submit again after doing optimization.
-> Be careful in nested loop. Iterating variable name should be different for both loop.
-> Think simple first.
-> Don't be stupid.
-> Be comfortable and in your control.
*/]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>MYTEMPLATE</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++, source.cpp</scope>
</snippet>
